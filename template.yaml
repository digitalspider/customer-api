AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DigitalSpider Customer Serverless APIs and Lambdas

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    MemorySize: 256
    Timeout: 15
    VpcConfig:
      SubnetIds:
        - Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/subnet1:1}}"
        - Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/subnet2:1}}"
        - Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/subnet3:1}}"
        # Fn::Split:
        #   - ','
        #   - Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/subnets:1}}"
          # - Fn::ImportValue:
          #     Fn::Sub: ds-infra-network-subnetids-${AWSENV}
      SecurityGroupIds:
        - Ref: CustomerSG

Parameters:
  AWSENV:
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod
      - local
    Default: local
  StageName:
    Type: String
    AllowedPattern: '[a-z0-9]+'
    Default: v1
  DomainName:
    Type: String
    AllowedPattern: '[a-z0-9\.]+'
    Default: digitalspider.com.au

Conditions:
  isLocal:
    Fn::Equals:
      - Ref: AWSENV
      - local
  isDev:
    Fn::Equals:
      - Ref: AWSENV
      - dev
  isStaging:
    Fn::Equals:
      - Ref: AWSENV
      - staging
  isProd:
    Fn::Equals:
      - Ref: AWSENV
      - prod

# Mappings docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
Mappings:
  ReferenceMap:
    prod:
      CertificateARN: arn:aws:acm:ap-southeast-2:767397774377:certificate/e726795b-fa86-4eb7-bf68-c7cb999acc4b
    staging:
      CertificateARN: arn:aws:acm:ap-southeast-2:767397774377:certificate/4173bb17-2f46-489a-8349-5cf21d5ae7b5
    dev:
      CertificateARN: arn:aws:acm:ap-southeast-2:767397774377:certificate/b5ec5fcb-6e43-428d-bf51-fa45fe6e4f9c
    local:
      CertificateARN: arn:aws:acm:ap-southeast-2:767397774377:certificate/b5ec5fcb-6e43-428d-bf51-fa45fe6e4f9c

Resources:
  #BEGIN: Security groups
  CustomerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Customer APIs SG
      SecurityGroupIngress:
        - IpProtocol: -1
          SourcePrefixListId: pl-62a5400b # DynamoDB vpce prefixList
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          DestinationPrefixListId: pl-62a5400b # DynamoDB vpce prefixList
      VpcId:
        Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/id:1}}"
  VPCEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC Endpoint SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/id:1}}"
  #END: Security group

  #BEGIN: Route53
  CustomerHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name:
        Ref: DomainName
  #END: Route53

  #BEGIN: Api Gateway
  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /logs/api-gateway/api-access-logs-${AWSENV}
      RetentionInDays: 30

  # Need to enable logs: https://coady.tech/aws-cloudwatch-logs-arn/ and https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html
  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: auth-api-${AWSENV}
      Description: Auth API Gateway
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      StageName:
        Ref: StageName
      Cors:
        AllowMethods: "'POST, GET, PUT'"
        AllowHeaders: "'X-Forwarded-For,Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,AccessToken'"
        AllowOrigin:
          Fn::If: [isProd, Ref: DomainName, Fn::If: [isLocal, '*', Fn::Sub: '${AWSENV}.${DomainName}']]
        MaxAge: "'600'"
        AllowCredentials: true
      MethodSettings:
        - ResourcePath: /* # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
          LoggingLevel: ERROR
          MetricsEnabled: true # Requires setup
          DataTraceEnabled: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: auth.openapi.yaml
      Domain:
        BasePath:
          - /v1/auth
        CertificateArn:
          Fn::FindInMap: [ReferenceMap, Ref: AWSENV, CertificateARN]
        DomainName:
          Fn::If: [isProd, Fn::Sub: 'api.${DomainName}', Fn::Sub: 'api-${AWSENV}.${DomainName}']
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneName:
            Fn::Sub: '${DomainName}.'
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt: AccessLogs.Arn
        Format: requestId:$context.requestId,APIId:$context.apiId,PrincipalId:$context.authorizer.principalId,XRayId:$context.xrayTraceId,SourceIp:$context.identity.sourceIp,Protocol:$context.protocol,HttpMethod:$context.httpMethod,DomainName:$context.domainName,Stage:$context.stage,RequestPath:$context.path,ResourcePath:$context.resourcePath,RequestTime:$context.requestTime,ResponseLatency:$context.responseLatency,ResponseStatus:$context.status,Validation:$context.error.validationErrorString,WAFLatency:$context.waf.latency,AuthenticateLatency:$context.authenticate.latency,AuthorizerLatency:$context.authorizer.latency,AuthorizeLatency:$context.authorize.latency,IntegrationLatency:$context.integration.latency
      Tags:
        Name: Auth API Gateway
        Description: Auth API Gateway

  CustomerApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: customer-api-${AWSENV}
      Description: Customer API Gateway
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      StageName:
        Ref: StageName
      Cors:
        AllowMethods: "'POST, GET, PUT'"
        AllowHeaders: "'X-Forwarded-For,Content-Type,Authorization,X-Amz-Date,X-Amz-Security-Token,AccessToken'"
        AllowOrigin:
          Fn::If: [isProd, Ref: DomainName, Fn::If: [isLocal, '*', Fn::Sub: '${AWSENV}.${DomainName}']]
        MaxAge: "'600'"
        AllowCredentials: true
      Auth:
        AddDefaultAuthorizerToCorsPreflight: False # CORS: removes Authorizer from the automatically created OPTIONS methods
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn:
              Fn::GetAtt: LambdaRequestAuthorizer.Arn
            Identity:
              Headers:
                - Authorization
      MethodSettings:
        - ResourcePath: /* # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
          LoggingLevel: ERROR
          MetricsEnabled: true # Requires setup
          DataTraceEnabled: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: customer.openapi.yaml
      Domain:
        BasePath:
          - /v1
        CertificateArn:
          Fn::FindInMap: [ReferenceMap, Ref: AWSENV, CertificateARN]
        DomainName:
          Fn::If: [isProd, Fn::Sub: 'api.${DomainName}', Fn::Sub: 'api-${AWSENV}.${DomainName}']
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneName:
            Fn::Sub: '${DomainName}.'
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt: AccessLogs.Arn
        Format: requestId:$context.requestId,APIId:$context.apiId,PrincipalId:$context.authorizer.principalId,XRayId:$context.xrayTraceId,SourceIp:$context.identity.sourceIp,Protocol:$context.protocol,HttpMethod:$context.httpMethod,DomainName:$context.domainName,Stage:$context.stage,RequestPath:$context.path,ResourcePath:$context.resourcePath,RequestTime:$context.requestTime,ResponseLatency:$context.responseLatency,ResponseStatus:$context.status,Validation:$context.error.validationErrorString,WAFLatency:$context.waf.latency,AuthenticateLatency:$context.authenticate.latency,AuthorizerLatency:$context.authorizer.latency,AuthorizeLatency:$context.authorize.latency,IntegrationLatency:$context.integration.latency
      Tags:
        Name: Customer API Gateway
        Description: Customer API Gateway
  #END: Api Gateway

  #BEGIN: IAM Role
  AuthLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName:
            Fn::Sub: customer-CloudWatchAccess-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/*
        - PolicyName:
            Fn::Sub: customer-SecretsManager-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - Fn::Join:
                    - ''
                    - - Fn::GetAtt: CustomerSecrets.Id
                      - '*'
        - PolicyName:
            Fn::Sub: auth-DynamoDBItemAccess-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - Fn::GetAtt: AuthTable.Arn
                  - Fn::Join:
                    - ''
                    - - Fn::GetAtt: AuthTable.Arn
                      - /index/*
        - PolicyName:
            Fn::Sub: customer-DynamoDBItemAccess-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - Fn::GetAtt: CustomerTable.Arn
                  - Fn::Join:
                    - ''
                    - - Fn::GetAtt: CustomerTable.Arn
                      - /index/*
  CustomerLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName:
            Fn::Sub: customer-CloudWatchAccess-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/*
        - PolicyName:
            Fn::Sub: customer-SecretsManager-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - Fn::Join:
                    - ''
                    - - Fn::GetAtt: CustomerSecrets.Id
                      - '*'
        - PolicyName:
            Fn::Sub: customer-DynamoDBItemAccess-${AWSENV}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - Fn::GetAtt: CustomerTable.Arn
                  - Fn::Join:
                    - ''
                    - - Fn::GetAtt: CustomerTable.Arn
                      - /index/*
  #END: IAM Role

  #BEGIN: Secrets
  SecretsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.secretsmanager
      SubnetIds: 
        - Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/subnet1:1}}"
        - Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/subnet2:1}}"
        - Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/subnet3:1}}"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - Ref: VPCEndpointSG
      VpcId:
        Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/id:1}}"
  CustomerSecrets:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Secrets for customer
      Name:
        Fn::Sub: secrets-${AWSENV}
  #END: Secrets

  #BEGIN: DynamoDB tables
  DynamoVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.dynamodb
      RouteTableIds: 
        - Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/routetable:1}}"
      VpcEndpointType: Gateway
      VpcId:
        Fn::Sub: "{{resolve:ssm:/${AWSENV}/vpc/id:1}}"
  AuthTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: auth-${AWSENV}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: username-index
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  CustomerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: customer-${AWSENV}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createdBy
          AttributeType: S
        - AttributeName: groupId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: createdBy-index
          KeySchema:
            - AttributeName: createdBy
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: groupId-index
          KeySchema:
            - AttributeName: groupId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  #END: DynamoDB tables

  #BEGIN: Lambda Functions
  LambdaRequestAuthorizer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Lambda API Authorizer
      FunctionName:
        Fn::Sub: auth-api-authorizer-${AWSENV}
      Role:
        Fn::GetAtt: AuthLambdaIAMRole.Arn
      CodeUri: src/authorizer/
      Handler: authorize.handleEvent
      Tracing: Active
      Layers:
        - Ref: RuntimeDependenciesLayer
      Environment:
        Variables:
          AWSENV:
            Fn::Sub: ${AWSENV}
          DOMAIN_NAME:
            Ref: DomainName
      LoggingConfig:
        LogGroup:
          Ref: LambdaRequestAuthorizerLogGroup
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - authorize.ts

  AuthApiFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Auth API Lambda
      FunctionName:
        Fn::Sub: auth-api-${AWSENV}
      Role:
        Fn::GetAtt: AuthLambdaIAMRole.Arn
      CodeUri: src/handlers/
      Handler: authHandler.handleEvent
      Tracing: Active
      Layers:
        - Ref: RuntimeDependenciesLayer
      Environment:
        Variables:
          AWSENV:
            Fn::Sub: ${AWSENV}
          DOMAIN_NAME:
            Ref: DomainName
      LoggingConfig:
        LogGroup:
          Ref: AuthApiFunctionLogGroup
      Events:
        Login:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId:
              Ref: AuthApi
            Stage:
              Ref: StageName
        SignUp:
          Type: Api
          Properties:
            Path: /signup
            Method: post
            RestApiId:
              Ref: AuthApi
            Stage:
              Ref: StageName
        VerifyJWT:
          Type: Api
          Properties:
            Path: /verify
            Method: get
            RestApiId:
              Ref: AuthApi
            Stage:
              Ref: StageName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - authHandler.ts

  CustomerApiFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Customer API Lambda
      FunctionName:
        Fn::Sub: customer-api-${AWSENV}
      Role:
        Fn::GetAtt: CustomerLambdaIAMRole.Arn
      CodeUri: src/handlers/
      Handler: appHandler.handleEvent
      Tracing: Active
      Layers:
        - Ref: RuntimeDependenciesLayer
      Environment:
        Variables:
          AWSENV:
            Fn::Sub: ${AWSENV}
          DOMAIN_NAME:
            Ref: DomainName
      LoggingConfig:
        LogGroup:
          Ref: CustomerApiFunctionLogGroup
      Events:
        CreateCustomer:
          Type: Api
          Properties:
            Path: /customer
            Method: post
            RestApiId:
              Ref: CustomerApi
            Stage:
              Ref: StageName
        ListCustomers:
          Type: Api
          Properties:
            Path: /customer
            Method: get
            RestApiId:
              Ref: CustomerApi
            Stage:
              Ref: StageName
        GetCustomer:
          Type: Api
          Properties:
            Path: /customer/{uuid}
            Method: get
            RestApiId:
              Ref: CustomerApi
            Stage:
              Ref: StageName
        UpdateCustomer:
          Type: Api
          Properties:
            Path: /customer/{uuid}
            Method: put
            RestApiId:
              Ref: CustomerApi
            Stage:
              Ref: StageName
        DeleteCustomer:
          Type: Api
          Properties:
            Path: /customer/{uuid}
            Method: delete
            RestApiId:
              Ref: CustomerApi
            Stage:
              Ref: StageName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - appHandler.ts
  #END: Lambda Functions

  #BEGIN: Lambda Layers
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName:
        Fn::Sub: customer-dependencies-${AWSENV}
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete
  #END: Lambda Layers

  #BEGIN: Lambda LogGroups
  LambdaRequestAuthorizerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/auth-api-authorizer-${AWSENV}
      RetentionInDays: 30
  AuthApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/auth-api-${AWSENV}
      RetentionInDays: 30
  CustomerApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/customer-api-${AWSENV}
      RetentionInDays: 30
  #END: Lambda LogGroups

Outputs:
  CustomerApi:
    Description: URL of the API endpoint
    Value:
      Fn::Sub: https://${CustomerApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/
    Export:
      Name:
        Fn::Sub: customer-api-url-${AWSENV}
  CustomerApiId:
    Description: Api id of CustomerApi
    Value:
      Ref: CustomerApi
    Export:
      Name:
        Fn::Sub: customer-api-id-${AWSENV}
  AuthTable:
    Description: Arn of DynamoDB table AuthTable
    Value:
      Fn::GetAtt: AuthTable.Arn
    Export:
      Name:
        Fn::Sub: auth-dynamo-table-${AWSENV}
  CustomerTable:
    Description: Arn of DynamoDB table CustomerTable
    Value:
      Fn::GetAtt: CustomerTable.Arn
    Export:
      Name:
        Fn::Sub: customer-dynamo-table-${AWSENV}
  CustomerApiFunctionArn:
    Description: Customer Lambda Api Function ARN
    Value:
      Fn::GetAtt: CustomerApiFunction.Arn
    Export:
      Name:
        Fn::Sub: customer-api-lambda-arn-${AWSENV}
